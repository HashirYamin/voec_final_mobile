import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(18.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 5,
        space: 5,
        color: appTheme.black90001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 17.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 15.fSize,
          fontFamily: 'ABeeZee',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 40.fSize,
          fontFamily: 'ABeeZee',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 25.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray800,
          fontSize: 12.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 10.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        labelSmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 9.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w800,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 20.fSize,
          fontFamily: 'ABeeZee',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 15.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X19FFFFFF),
    primaryContainer: Color(0XFF404D51),
    secondaryContainer: Color(0XFFFFF7F7),

    // Error colors
    errorContainer: Color(0X00EA8E8E),
    onError: Color(0XFFFCFCFC),
    onErrorContainer: Color(0XFF2603E9),

    // On colors(text colors)
    onPrimary: Color(0XFF1A2B88),
    onPrimaryContainer: Color(0XFF030303),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF010101);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blueA200 => Color(0XFF4091FF);

  // BlueGray
  Color get blueGray100 => Color(0XFFCCCCCC);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF869193);
  Color get blueGray40001 => Color(0XFF88979E);
  Color get blueGray800 => Color(0XFF354348);

  // DeepPurple
  Color get deepPurple800 => Color(0XFF241ED3);

  // Gray
  Color get gray100 => Color(0XFFF7F5F0);
  Color get gray200 => Color(0XFFEFEEEB);
  Color get gray20001 => Color(0XFFEAEAEA);
  Color get gray20002 => Color(0XFFE7E7E7);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFC3B3B3);
  Color get gray40002 => Color(0XFFBDB69F);
  Color get gray40003 => Color(0XFFBCBCBC);
  Color get gray50 => Color(0XFFFFF8F8);
  Color get gray500 => Color(0XFFA88989);
  Color get gray50001 => Color(0XFFA18E80);
  Color get gray5001 => Color(0XFFFFF5F5);
  Color get gray600 => Color(0XFF6A707C);
  Color get gray60001 => Color(0XFF9F846F);
  Color get gray60002 => Color(0XFF6B6B6B);
  Color get gray700 => Color(0XFF585454);
  Color get gray70001 => Color(0XFF5F5F5F);
  Color get gray800 => Color(0XFF414141);
  Color get gray900 => Color(0XFF231F20);
  Color get gray90001 => Color(0XFF2E0C0C);
  Color get gray90002 => Color(0XFF1E232C);
  Color get gray90003 => Color(0XFF310F0F);

  // Green
  Color get greenA700 => Color(0XFF1BC50E);

  // Indigo
  Color get indigo50 => Color(0XFFE8ECF4);
  Color get indigo5001 => Color(0XFFE4EDF2);
  Color get indigo600 => Color(0XFF3E5BA2);

  // LightGreen
  Color get lightGreen600 => Color(0XFF85A634);

  // Lime
  Color get lime700 => Color(0XFFB49F2F);

  // Purple
  Color get purple100 => Color(0XFFD5ACE5);

  // Red
  Color get red400 => Color(0XFFF15858);
  Color get red50 => Color(0XFFFFF3F3);
  Color get red500 => Color(0XFFF14336);
  Color get red900 => Color(0XFF9A0F0D);
  Color get redA700 => Color(0XFFFF0000);

  // Teal
  Color get tealA700 => Color(0XFF16C098);

  // White
  Color get whiteA700 => Color(0XFFFFFDFD);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
